package examples

// NOTE: This file is generated by memstore. Do not edit!

import (
	"strconv"
	"strings"

	"github.com/Applifier/go-memstore"
)

func memStoreGenerateSimpleStructKey(s SimpleStruct) string {
	var b strings.Builder

	b.WriteString(strconv.FormatInt(int64(s.Foo), 10))

	b.Write([]byte(":"))

	b.WriteString(strconv.FormatInt(int64(s.Bar), 10))

	return b.String()
}

type storedSimpleStruct struct {
	Biz string
	Val float64
}

// SimpleStructMemStoreQuery is used to query data from the memory store
type SimpleStructMemStoreQuery struct {
	Foo int
	Bar int
}

// SimpleStructMemStore instance of a memory store for SimpleStruct
type SimpleStructMemStore struct {
	store *memstore.Store
}

// NewSimpleStructMemStore creates a new memorystore for SimpleStruct struct instances
func NewSimpleStructMemStore() *SimpleStructMemStore {
	return &SimpleStructMemStore{
		store: memstore.New(),
	}
}

// Insert inserts an instance of SimpleStruct to the memorystore
func (s *SimpleStructMemStore) Insert(i SimpleStruct) {
	stored := storedSimpleStruct{}

	stored.Biz = i.Biz
	stored.Val = i.Val

	key := memStoreGenerateSimpleStructKey(i)

	s.store.Insert(key, stored)
}

// Get returns an instance of SimpleStruct from the memorystore
func (s *SimpleStructMemStore) Get(query SimpleStructMemStoreQuery) (res SimpleStruct, ok bool) {
	res.Foo = query.Foo
	res.Bar = query.Bar

	key := memStoreGenerateSimpleStructKey(res)

	val, ok := s.store.Get(key)
	if !ok {
		return res, false
	}

	stored := val.(storedSimpleStruct)

	res.Biz = stored.Biz
	res.Val = stored.Val

	return
}
